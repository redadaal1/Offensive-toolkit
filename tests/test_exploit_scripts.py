#!/usr/bin/env python3
import pytest
import subprocess
import json
from pathlib import Path
from typing import Dict, List
import sys
import os

# Add project root to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from core.config import config
from core.resume import ResumeManager

class TestExploitScripts:
    """Test suite for exploit scripts."""
    
    @pytest.fixture
    def test_target(self):
        """Test target for exploitation."""
        return "192.168.1.10"
    
    @pytest.fixture
    def test_attacker_ip(self):
        """Test attacker IP."""
        return "192.168.1.16"
    
    @pytest.fixture
    def test_output_dir(self):
        """Test output directory."""
        return "test_outputs"
    
    def test_ftp_exploit_script(self, test_target, test_attacker_ip, test_output_dir):
        """Test FTP exploit script functionality."""
        script_path = Path("core/exploit/ftp_exploit.py")
        
        # Check if script exists
        assert script_path.exists(), f"FTP exploit script not found: {script_path}"
        
        # Test script with basic arguments
        cmd = [
            "python3", str(script_path),
            test_target,
            "--attacker-ip", test_attacker_ip,
            "--attacker-port", "4444",
            "--no-confirm"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            # Script should run without errors (even if no vulnerabilities found)
            assert result.returncode in [0, 1], f"FTP script failed with return code {result.returncode}"
        except subprocess.TimeoutExpired:
            pytest.fail("FTP exploit script timed out")
    
    def test_http_exploit_script(self, test_target, test_attacker_ip, test_output_dir):
        """Test HTTP exploit script functionality."""
        script_path = Path("core/exploit/http_exploit.py")
        
        # Check if script exists
        assert script_path.exists(), f"HTTP exploit script not found: {script_path}"
        
        # Test script with basic arguments
        cmd = [
            "python3", str(script_path),
            test_target,
            "--attacker-ip", test_attacker_ip,
            "--attacker-port", "4444",
            "--no-confirm"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            # Script should run without errors (even if no vulnerabilities found)
            assert result.returncode in [0, 1], f"HTTP script failed with return code {result.returncode}"
        except subprocess.TimeoutExpired:
            pytest.fail("HTTP exploit script timed out")
    
    def test_ssh_exploit_script(self, test_target, test_attacker_ip, test_output_dir):
        """Test SSH exploit script functionality."""
        script_path = Path("core/exploit/ssh_exploit.py")
        
        # Check if script exists
        assert script_path.exists(), f"SSH exploit script not found: {script_path}"
        
        # Test script with basic arguments
        cmd = [
            "python3", str(script_path),
            test_target,
            "--attacker-ip", test_attacker_ip,
            "--attacker-port", "4444",
            "--no-confirm"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            # Script should run without errors (even if no vulnerabilities found)
            assert result.returncode in [0, 1], f"SSH script failed with return code {result.returncode}"
        except subprocess.TimeoutExpired:
            pytest.fail("SSH exploit script timed out")
    
    def test_telnet_exploit_script(self, test_target, test_attacker_ip, test_output_dir):
        """Test Telnet exploit script functionality."""
        script_path = Path("core/exploit/telnet_exploit.py")
        
        # Check if script exists
        assert script_path.exists(), f"Telnet exploit script not found: {script_path}"
        
        # Test script with basic arguments
        cmd = [
            "python3", str(script_path),
            test_target,
            "--attacker-ip", test_attacker_ip,
            "--attacker-port", "4444",
            "--no-confirm"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            # Script should run without errors (even if no vulnerabilities found)
            assert result.returncode in [0, 1], f"Telnet script failed with return code {result.returncode}"
        except subprocess.TimeoutExpired:
            pytest.fail("Telnet exploit script timed out")
    
    def test_nfs_exploit_script(self, test_target, test_attacker_ip, test_output_dir):
        """Test NFS exploit script functionality."""
        script_path = Path("core/exploit/nfs_exploit.py")
        
        # Check if script exists
        assert script_path.exists(), f"NFS exploit script not found: {script_path}"
        
        # Test script with basic arguments
        cmd = [
            "python3", str(script_path),
            test_target,
            "--attacker-ip", test_attacker_ip,
            "--attacker-port", "4444",
            "--no-confirm"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            # Script should run without errors (even if no vulnerabilities found)
            assert result.returncode in [0, 1], f"NFS script failed with return code {result.returncode}"
        except subprocess.TimeoutExpired:
            pytest.fail("NFS exploit script timed out")

class TestConfiguration:
    """Test configuration system."""
    
    def test_config_loading(self):
        """Test configuration loading."""
        # Test that config loads without errors
        assert config is not None
        assert config.get("general.output_directory") == "outputs"
        assert config.get("exploitation.default_attacker_ip") == "192.168.1.16"
    
    def test_service_config(self):
        """Test service configuration."""
        # Test service configuration retrieval
        http_config = config.get_service_config("http")
        assert isinstance(http_config, dict)
        
        # Test credentials retrieval
        metasploitable_creds = config.get_credentials("metasploitable2")
        assert "usernames" in metasploitable_creds
        assert "passwords" in metasploitable_creds
    
    def test_wordlists(self):
        """Test wordlist configuration."""
        wordlists = config.get_wordlists()
        assert isinstance(wordlists, dict)

class TestResumeManager:
    """Test resume capability system."""
    
    def test_resume_manager_creation(self):
        """Test resume manager creation."""
        resume_mgr = ResumeManager("test_target")
        assert resume_mgr.target == "test_target"
        assert resume_mgr.is_phase_pending("reconnaissance")
    
    def test_phase_management(self):
        """Test phase management."""
        resume_mgr = ResumeManager("test_target")
        
        # Test phase transitions
        resume_mgr.start_phase("reconnaissance")
        assert resume_mgr.is_phase_running("reconnaissance")
        
        resume_mgr.complete_phase("reconnaissance")
        assert resume_mgr.is_phase_completed("reconnaissance")
    
    def test_service_tracking(self):
        """Test service tracking."""
        resume_mgr = ResumeManager("test_target")
        
        # Test adding completed services
        resume_mgr.add_completed_service("ftp")
        assert "ftp" in resume_mgr.get_completed_services()
        
        # Test adding failed services
        resume_mgr.add_failed_service("ssh")
        assert "ssh" in resume_mgr.get_failed_services()
    
    def test_progress_summary(self):
        """Test progress summary."""
        resume_mgr = ResumeManager("test_target")
        summary = resume_mgr.get_progress_summary()
        
        assert "target" in summary
        assert "total_phases" in summary
        assert "completed_phases" in summary
        assert "completion_percentage" in summary

class TestCLI:
    """Test CLI functionality."""
    
    def test_cli_help(self):
        """Test CLI help functionality."""
        cmd = ["python3", "-m", "cli.main", "--help"]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            assert result.returncode == 0, "CLI help should work"
            assert "Offensive Security Automation Toolkit" in result.stdout
        except subprocess.TimeoutExpired:
            pytest.fail("CLI help timed out")
    
    def test_cli_list_services(self):
        """Test CLI list services functionality."""
        cmd = ["python3", "-m", "cli.main", "--list-services"]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            assert result.returncode == 0, "CLI list services should work"
            assert "Available Services" in result.stdout
        except subprocess.TimeoutExpired:
            pytest.fail("CLI list services timed out")

class TestCoreModules:
    """Test core modules functionality."""
    
    def test_exploit_orchestrator(self):
        """Test exploit orchestrator."""
        from core.exploit import get_services_from_outputs, map_services_to_scripts
        
        # Test service mapping
        services = {"http", "ftp", "ssh"}
        script_map = map_services_to_scripts(services)
        
        assert isinstance(script_map, dict)
        assert "http" in script_map or "ftp" in script_map or "ssh" in script_map
    
    def test_post_exploit_orchestrator(self):
        """Test post-exploit orchestrator."""
        from core.post_exploit import get_post_exploit_scripts, map_services_to_post_exploit_scripts
        
        # Test post-exploit script discovery
        scripts = get_post_exploit_scripts()
        assert isinstance(scripts, list)
        
        # Test service mapping
        services = {"http", "ftp", "ssh"}
        script_map = map_services_to_post_exploit_scripts(services)
        
        assert isinstance(script_map, dict)

def test_dependencies():
    """Test that all required dependencies are available."""
    required_modules = [
        "nmap",
        "jinja2",
        "weasyprint",
        "rich",
        "bs4",
        "requests",
        "urllib3",
        "markdown"
    ]
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError as e:
            pytest.fail(f"Required module {module} not available: {e}")

def test_file_structure():
    """Test that required files and directories exist."""
    required_paths = [
        "core/exploit/",
        "core/services/",
        "core/post-exploit/",
        "cli/",
        "config/",
        "outputs/",
        "requirements.txt",
        "README.md"
    ]
    
    for path in required_paths:
        assert Path(path).exists(), f"Required path {path} does not exist"

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 