{
  "name": "Cross-site scripting (reflected)",
  "type": "vulnerability",
  "severity": "Low",
  "confidence": "Certain",
  "host": "",
  "path": "/mutillidae/",
  "url": "/mutillidae/",
  "evidence": [
    {
      "type": "FirstOrderEvidence",
      "detail": {
        "payload": {
          "bytes": "MjQzMzgnO2FsZXJ0KDEpLy8zMDA=",
          "flags": 1028
        },
        "band_flags": [
          "in_band"
        ]
      },
      "request_response": {
        "url": "http://192.168.1.50/mutillidae/?page=add-to-your-blog.php",
        "request": [
          {
            "type": "DataSegment",
            "data": "R0VUIC9tdXRpbGxpZGFlLz9wYWdlPWFkZC10by15b3VyLWJsb2cucGhwIEhUVFAvMS4xDQpIb3N0OiAxOTIuMTY4LjEuNTANCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KU2VjLUNILVVBOiAiR29vZ2xlIENocm9tZSI7dj0iMTM4IiwgIk5vdD1BP0JyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSIxMzgiDQpTZWMtQ0gtVUEtTW9iaWxlOiA/MA0KU2VjLUNILVVBLVBsYXRmb3JtOiAiTGludXgiDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMzguMC4wLjAgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjcNClNlYy1GZXRjaC1TaXRlOiBub25lDQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1Vc2VyOiA/MQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29va2llOiBQSFBTRVNTSUQ9M2U2ZTlhMzg0MTljYWJhZGM1MmQyOTg2OThhM2YzZTYNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly8xOTIuMTY4LjEuNTAvbXV0aWxsaWRhZS8=",
            "length": 797
          },
          {
            "type": "HighlightSegment",
            "data": "MjQzMzgnO2FsZXJ0KDEpLy8zMDA=",
            "length": 20
          },
          {
            "type": "DataSegment",
            "data": "DQpDb250ZW50LUxlbmd0aDogMA0KDQo=",
            "length": 23
          }
        ],
        "response": [
          {
            "type": "DataSegment",
            "data": "SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUdWUsIDAyIFNlcCAyMDI1IDE0OjE5OjMzIEdNVA0KU2VydmVyOiBBcGFjaGUvMi4yLjggKFVidW50dSkgREFWLzINClgtUG93ZXJlZC1CeTogUEhQLzUuMi40LTJ1YnVudHU1LjEwDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KTG9nZ2VkLUluLVVzZXI6IA0KQ2FjaGUtQ29udHJvbDogcHVibGljDQpQcmFnbWE6IHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVHVlLCAwMiBTZXAgMjAyNSAxNDoxOTozMyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbA0KQ29udGVudC1MZW5ndGg6IDI1NDY5DQoNCg0KCQkJPCEtLSBJIHRoaW5rIHRoZSBkYXRhYmFzZSBwYXNzd29yZCBpcyBzZXQgdG8gYmxhbmsgb3IgcGVyaGFwcyBzYW11cmFpLg0KCQkJSXQgZGVwZW5kcyBvbiB3aGV0aGVyIHlvdSBpbnN0YWxsZWQgdGhpcyB3ZWIgYXBwIGZyb20gaXJvbmdlZWtzIHNpdGUgb3INCgkJCWFyZSB1c2luZyBpdCBpbnNpZGUgS2V2aW4gSm9obnNvbnMgU2FtdXJhaSB3",
            "length": 540
          },
          {
            "type": "SnipSegment",
            "length": 21203
          },
          {
            "type": "DataSegment",
            "data": "PGEgCW9uY2xpY2s9ImRvY3VtZW50LmxvY2F0aW9uLmhyZWY9J2h0dHA6Ly8xOTIuMTY4LjEuNTAvbXV0aWxsaWRhZS8=",
            "length": 68
          },
          {
            "type": "HighlightSegment",
            "data": "MjQzMzgnO2FsZXJ0KDEpLy8zMDA=",
            "length": 20
          },
          {
            "type": "DataSegment",
            "data": "JzsiIA0KCQlzdHlsZT0iY3Vyc29yOnBvaW50ZXI7Ij4=",
            "length": 32
          },
          {
            "type": "SnipSegment",
            "length": 3946
          }
        ],
        "was_redirect_followed": false,
        "request_time": "167"
      }
    }
  ],
  "description": "The value of the <b>Referer</b> HTTP header is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>24338';alert(1)//300</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
  "remediation": "Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ",
  "references": []
}