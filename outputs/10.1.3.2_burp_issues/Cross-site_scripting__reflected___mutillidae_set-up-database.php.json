{
  "name": "Cross-site scripting (reflected)",
  "type": "vulnerability",
  "severity": "Low",
  "confidence": "Certain",
  "host": "",
  "path": "/mutillidae/set-up-database.php",
  "url": "/mutillidae/set-up-database.php",
  "evidence": [
    {
      "type": "FirstOrderEvidence",
      "detail": {
        "payload": {
          "bytes": "OTc2MjMiO2FsZXJ0KDEpLy81Mzc=",
          "flags": 4
        },
        "band_flags": [
          "in_band"
        ]
      },
      "request_response": {
        "url": "http://10.1.3.2/mutillidae/set-up-database.php",
        "request": [
          {
            "type": "DataSegment",
            "data": "R0VUIC9tdXRpbGxpZGFlL3NldC11cC1kYXRhYmFzZS5waHAgSFRUUC8xLjENCkhvc3Q6IDEwLjEuMy4yDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANClNlYy1DSC1VQTogIkdvb2dsZSBDaHJvbWUiO3Y9IjEzOCIsICJOb3Q9QT9CcmFuZCI7dj0iOCIsICJDaHJvbWl1bSI7dj0iMTM4Ig0KU2VjLUNILVVBLU1vYmlsZTogPzANClNlYy1DSC1VQS1QbGF0Zm9ybTogIkxpbnV4Ig0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUztxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTM4LjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC43DQpTZWMtRmV0Y2gtU2l0ZTogbm9uZQ0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtVXNlcjogPzENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQ29ubmVjdGlvbjogY2xvc2UNCkNvb2tpZTogUEhQU0VTU0lEPTBhMjNiNDk0NDNiZjNlMTIzNDBhYzhmY2FjMzJlOTQyDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vMTAuMS4zLjIvbXV0aWxsaWRhZS8=",
            "length": 782
          },
          {
            "type": "HighlightSegment",
            "data": "OTc2MjMiO2FsZXJ0KDEpLy81Mzc=",
            "length": 20
          },
          {
            "type": "DataSegment",
            "data": "DQpDb250ZW50LUxlbmd0aDogMA0KDQo=",
            "length": 23
          }
        ],
        "response": [
          {
            "type": "DataSegment",
            "data": "SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUaHUsIDA0IFNlcCAyMDI1IDE0OjEwOjAyIEdNVA0KU2VydmVyOiBBcGFjaGUvMi4yLjggKFVidW50dSkgREFWLzINClgtUG93ZXJlZC1CeTogUEhQLzUuMi40LTJ1YnVudHU1LjEwDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWwNCkNvbnRlbnQtTGVuZ3RoOiAyODM2DQoNCjwhRE9DVFlQRSBIVE1MIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi8xOTk5L1JFQy1odG1sNDAxLTE5OTkxMjI0L2xvb3NlLmR0ZCI+DQo8aHRtbD4NCgk8aGVhZD4NCgkJPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJmYXZpY29uLmljbyIgdHlwZT0iaW1hZ2Uv",
            "length": 396
          },
          {
            "type": "SnipSegment",
            "length": 2396
          },
          {
            "type": "DataSegment",
            "data": "PHNjcmlwdD5pZihjb25maXJtKCJObyBQSFAgb3IgTXlTUUwgZXJyb3JzIHdlcmUgZGV0ZWN0ZWQgd2hlbiByZXNldHRpbmcgdGhlIGRhdGFiYXNlLlxuXG5DbGljayBPSyB0byBwcm9jZWVkIG9yIENhbmNlbCB0byBzdGF5IG9uIHRoaXMgcGFnZS4iKSl7ZG9jdW1lbnQubG9jYXRpb249Imh0dHA6Ly8xMC4xLjMuMi9tdXRpbGxpZGFlLw==",
            "length": 190
          },
          {
            "type": "HighlightSegment",
            "data": "OTc2MjMiO2FsZXJ0KDEpLy81Mzc=",
            "length": 20
          },
          {
            "type": "DataSegment",
            "data": "In07PC9zY3JpcHQ+",
            "length": 12
          },
          {
            "type": "SnipSegment",
            "length": 18
          }
        ],
        "was_redirect_followed": false,
        "request_time": "24"
      }
    }
  ],
  "description": "The value of the <b>Referer</b> HTTP header is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>97623\";alert(1)//537</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
  "remediation": "Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ",
  "references": []
}