{
  "name": "Cross-site scripting (reflected)",
  "type": "vulnerability",
  "severity": "Low",
  "confidence": "Certain",
  "host": "",
  "path": "/mutillidae/",
  "url": "/mutillidae/",
  "evidence": [
    {
      "type": "FirstOrderEvidence",
      "detail": {
        "payload": {
          "bytes": "ZWtueTI8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+Y3l3Y2s=",
          "flags": 4
        },
        "band_flags": [
          "in_band"
        ]
      },
      "request_response": {
        "url": "http://10.1.3.2/mutillidae/",
        "request": [
          {
            "type": "DataSegment",
            "data": "R0VUIC9tdXRpbGxpZGFlLyBIVFRQLzEuMQ0KSG9zdDogMTAuMS4zLjINCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KU2VjLUNILVVBOiAiR29vZ2xlIENocm9tZSI7dj0iMTM4IiwgIk5vdD1BP0JyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSIxMzgiDQpTZWMtQ0gtVUEtTW9iaWxlOiA/MA0KU2VjLUNILVVBLVBsYXRmb3JtOiAiTGludXgiDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMzguMC4wLjAgU2FmYXJpLzUzNy4zNg==",
            "length": 349
          },
          {
            "type": "HighlightSegment",
            "data": "ZWtueTI8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+Y3l3Y2s=",
            "length": 35
          },
          {
            "type": "DataSegment",
            "data": "DQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuNw0KU2VjLUZldGNoLVNpdGU6IG5vbmUNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVVzZXI6ID8xDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkNvbm5lY3Rpb246IGNsb3NlDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vMTAuMS4zLjIvDQpDb250ZW50LUxlbmd0aDogMA0KDQo=",
            "length": 374
          }
        ],
        "response": [
          {
            "type": "DataSegment",
            "data": "SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUaHUsIDA0IFNlcCAyMDI1IDEzOjM0OjE0IEdNVA0KU2VydmVyOiBBcGFjaGUvMi4yLjggKFVidW50dSkgREFWLzINClgtUG93ZXJlZC1CeTogUEhQLzUuMi40LTJ1YnVudHU1LjEwDQpFeHBpcmVzOiBUaHUsIDE5IE5vdiAxOTgxIDA4OjUyOjAwIEdNVA0KTG9nZ2VkLUluLVVzZXI6IA0KQ2FjaGUtQ29udHJvbDogcHVibGljDQpQcmFnbWE6IHB1YmxpYw0KU2V0LUNvb2tpZTogUEhQU0VTU0lEPWY3NzM3NDczYWQzYWFjN2FlMGUxMjBmNjQwNGVlMDhmOyBwYXRoPS8NCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDQgU2VwIDIwMjUgMTM6MzQ6MTQgR01UDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWwNCkNvbnRlbnQtTGVuZ3RoOiAyNDMyMw0KDQoNCgkJCTwhLS0gSSB0aGluayB0aGUgZGF0YWJhc2UgcGFzc3dvcmQgaXMgc2V0IHRvIGJsYW5rIG9yIHBlcmhhcHMgc2FtdXJhaS4NCgkJCUl0IGRlcGVuZHMgb24gd2hldGhlciB5b3UgaW5zdGFsbGVkIHRoaXMgd2ViIGFwcCBmcm9tIGlyb25nZWVrcyBzaXRlIG9yDQoJCQlhcmUgdXNpbmcgaXQgaW5zaWRlIEtldmluIEpvaG5zb25zIFNhbXVyYWkgdw==",
            "length": 604
          },
          {
            "type": "SnipSegment",
            "length": 23303
          },
          {
            "type": "DataSegment",
            "data": "PGRpdiBjbGFzcz0iZm9vdGVyIj5Ccm93c2VyOiBNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMzguMC4wLjAgU2FmYXJpLzUzNy4zNg==",
            "length": 130
          },
          {
            "type": "HighlightSegment",
            "data": "ZWtueTI8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+Y3l3Y2s=",
            "length": 35
          },
          {
            "type": "DataSegment",
            "data": "PC9kaXY+",
            "length": 6
          },
          {
            "type": "SnipSegment",
            "length": 649
          }
        ],
        "was_redirect_followed": false,
        "request_time": "268"
      }
    }
  ],
  "description": "The value of the <b>User-Agent</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>ekny2&lt;script&gt;alert(1)&lt;/script&gt;cywck</b> was submitted in the User-Agent HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
  "remediation": "",
  "references": []
}